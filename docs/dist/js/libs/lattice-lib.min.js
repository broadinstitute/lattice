var LatticeLib=function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=57)}({57:function(t,n,e){"use strict";e.r(n),e.d(n,"utils",(function(){return ns})),e.d(n,"plot",(function(){return es})),e.d(n,"lattice",(function(){return rs})),e.d(n,"showAvailablePlotTypes",(function(){return is})),e.d(n,"getPlotOptions",(function(){return os})),e.d(n,"getLatticeOptions",(function(){return as})),e.d(n,"Plot",(function(){return Ju})),e.d(n,"Lattice",(function(){return ts})),e.d(n,"default",(function(){return us}));var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,u=(o.left,a);var s=function(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},l=Array.prototype,c=(l.slice,l.map,function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}),h=Math.sqrt(50),f=Math.sqrt(10),d=Math.sqrt(2),p=function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=g(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function g(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=h?10:o>=f?5:o>=d?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=h?10:o>=f?5:o>=d?2:1)}function y(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=h?i*=10:o>=f?i*=5:o>=d&&(i*=2),n<t?-i:i}var v=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r};var m=Array.prototype.slice,w=function(t){return t};function x(t){return"translate("+(t+.5)+",0)"}function _(t){return"translate(0,"+(t+.5)+")"}function T(t){return function(n){return+t(n)}}function A(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function M(){return!this.__axis}function b(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,s=1===t||4===t?-1:1,l=4===t||2===t?"x":"y",c=1===t||3===t?x:_;function h(h){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):w:i,p=Math.max(o,0)+u,g=n.range(),y=+g[0]+.5,v=+g[g.length-1]+.5,m=(n.bandwidth?A:T)(n.copy()),x=h.selection?h.selection():h,_=x.selectAll(".domain").data([null]),b=x.selectAll(".tick").data(f,n).order(),E=b.exit(),C=b.enter().append("g").attr("class","tick"),N=b.select("line"),S=b.select("text");_=_.merge(_.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),b=b.merge(C),N=N.merge(C.append("line").attr("stroke","currentColor").attr(l+"2",s*o)),S=S.merge(C.append("text").attr("fill","currentColor").attr(l,s*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==x&&(_=_.transition(h),b=b.transition(h),N=N.transition(h),S=S.transition(h),E=E.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")})),C.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:m(t))}))),E.remove(),_.attr("d",4===t||2==t?a?"M"+s*a+","+y+"H0.5V"+v+"H"+s*a:"M0.5,"+y+"V"+v:a?"M"+y+","+s*a+"V0.5H"+v+"V"+s*a:"M"+y+",0.5H"+v),b.attr("opacity",1).attr("transform",(function(t){return c(m(t))})),N.attr(l+"2",s*o),S.attr(l,s*p).text(d),x.filter(M).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),x.each((function(){this.__axis=m}))}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=m.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:m.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:m.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(u=+t,h):u},h}var E={value:function(){}};function C(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new N(r)}function N(t){this._=t}function S(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function I(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function O(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=E,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}N.prototype=C.prototype={constructor:N,on:function(t,n){var e,r=this._,i=S(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=O(r[e],t.name,n);else if(null==n)for(e in r)r[e]=O(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=I(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new N(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var L=C;function k(){}var P=function(t){return null==t?k:function(){return this.querySelector(t)}};function R(){return[]}var U=function(t){return null==t?R:function(){return this.querySelectorAll(t)}},D=function(t){return function(){return this.matches(t)}},j=function(t){return new Array(t.length)};function z(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}z.prototype={constructor:z,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function H(t,n,e,r,i,o){for(var a,u=0,s=n.length,l=o.length;u<l;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new z(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function F(t,n,e,r,i,o,a){var u,s,l,c={},h=n.length,f=o.length,d=new Array(h);for(u=0;u<h;++u)(s=n[u])&&(d[u]=l="$"+a.call(s,s.__data__,u,n),l in c?i[u]=s:c[l]=s);for(u=0;u<f;++u)(s=c[l="$"+a.call(t,o[u],u,o)])?(r[u]=s,s.__data__=o[u],c[l]=null):e[u]=new z(t,o[u]);for(u=0;u<h;++u)(s=n[u])&&c[d[u]]===s&&(i[u]=s)}function V(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var $="http://www.w3.org/1999/xhtml",B={svg:"http://www.w3.org/2000/svg",xhtml:$,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Y=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),B.hasOwnProperty(n)?{space:B[n],local:t}:t};function G(t){return function(){this.removeAttribute(t)}}function q(t){return function(){this.removeAttributeNS(t.space,t.local)}}function X(t,n){return function(){this.setAttribute(t,n)}}function W(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Z(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function K(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var Q=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function J(t){return function(){this.style.removeProperty(t)}}function tt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function et(t,n){return t.style.getPropertyValue(n)||Q(t).getComputedStyle(t,null).getPropertyValue(n)}function rt(t){return function(){delete this[t]}}function it(t,n){return function(){this[t]=n}}function ot(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function at(t){return t.trim().split(/^|\s+/)}function ut(t){return t.classList||new st(t)}function st(t){this._node=t,this._names=at(t.getAttribute("class")||"")}function lt(t,n){for(var e=ut(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function ct(t,n){for(var e=ut(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ht(t){return function(){lt(this,t)}}function ft(t){return function(){ct(this,t)}}function dt(t,n){return function(){(n.apply(this,arguments)?lt:ct)(this,t)}}st.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function pt(){this.textContent=""}function gt(t){return function(){this.textContent=t}}function yt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function vt(){this.innerHTML=""}function mt(t){return function(){this.innerHTML=t}}function wt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function xt(){this.nextSibling&&this.parentNode.appendChild(this)}function _t(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Tt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===$&&n.documentElement.namespaceURI===$?n.createElement(t):n.createElementNS(e,t)}}function At(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var Mt=function(t){var n=Y(t);return(n.local?At:Tt)(n)};function bt(){return null}function Et(){var t=this.parentNode;t&&t.removeChild(this)}function Ct(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Nt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var St={},It=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(St={mouseenter:"mouseover",mouseleave:"mouseout"}));function Ot(t,n,e){return t=Lt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Lt(t,n,e){return function(r){var i=It;It=r;try{t.call(this,this.__data__,n,e)}finally{It=i}}}function kt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Pt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Rt(t,n,e){var r=St.hasOwnProperty(t.type)?Ot:Lt;return function(i,o,a){var u,s=this.__on,l=r(n,o,a);if(s)for(var c=0,h=s.length;c<h;++c)if((u=s[c]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=l,u.capture=e),void(u.value=n);this.addEventListener(t.type,l,e),u={type:t.type,name:t.name,value:n,listener:l,capture:e},s?s.push(u):this.__on=[u]}}function Ut(t,n,e){var r=Q(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Dt(t,n){return function(){return Ut(this,t,n)}}function jt(t,n){return function(){return Ut(this,t,n.apply(this,arguments))}}var zt=[null];function Ht(t,n){this._groups=t,this._parents=n}function Ft(){return new Ht([[document.documentElement]],zt)}Ht.prototype=Ft.prototype={constructor:Ht,select:function(t){"function"!=typeof t&&(t=P(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,l=r[i]=new Array(s),c=0;c<s;++c)(o=u[c])&&(a=t.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new Ht(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=U(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,l=0;l<s;++l)(a=u[l])&&(r.push(t.call(a,a.__data__,l,u)),i.push(a));return new Ht(r,i)},filter:function(t){"function"!=typeof t&&(t=D(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new Ht(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),c=-1,this.each((function(t){p[++c]=t})),p;var e,r=n?F:H,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),s=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],d=f.length,p=t.call(h,h&&h.__data__,c,i),g=p.length,y=s[c]=new Array(g),v=u[c]=new Array(g);r(h,f,y,v,l[c]=new Array(d),p,n);for(var m,w,x=0,_=0;x<g;++x)if(m=y[x]){for(x>=_&&(_=x+1);!(w=v[_])&&++_<g;);m._next=w||null}}return(u=new Ht(u,i))._enter=s,u._exit=l,u},enter:function(){return new Ht(this._enter||this._groups.map(j),this._parents)},exit:function(){return new Ht(this._exit||this._groups.map(j),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],h=l.length,f=a[u]=new Array(h),d=0;d<h;++d)(s=l[d]||c[d])&&(f[d]=s);for(;u<r;++u)a[u]=n[u];return new Ht(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=V);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,l=i[o]=new Array(s),c=0;c<s;++c)(a=u[c])&&(l[c]=a);l.sort(n)}return new Ht(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=Y(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?q:G:"function"==typeof n?e.local?K:Z:e.local?W:X)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?J:"function"==typeof n?nt:tt)(t,n,null==e?"":e)):et(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rt:"function"==typeof n?ot:it)(t,n)):this.node()[t]},classed:function(t,n){var e=at(t+"");if(arguments.length<2){for(var r=ut(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?dt:n?ht:ft)(e,n))},text:function(t){return arguments.length?this.each(null==t?pt:("function"==typeof t?yt:gt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?vt:("function"==typeof t?wt:mt)(t)):this.node().innerHTML},raise:function(){return this.each(xt)},lower:function(){return this.each(_t)},append:function(t){var n="function"==typeof t?t:Mt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:Mt(t),r=null==n?bt:"function"==typeof n?n:P(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Et)},clone:function(t){return this.select(t?Nt:Ct)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=kt(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?Rt:Pt,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?jt:Dt)(t,n))}};var Vt=Ft,$t=function(t){return"string"==typeof t?new Ht([[document.querySelector(t)]],[document.documentElement]):new Ht([[t]],zt)};var Bt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Yt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Gt(){}var qt="\\s*([+-]?\\d+)\\s*",Xt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Wt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Zt=/^#([0-9a-f]{3,8})$/,Kt=new RegExp("^rgb\\("+[qt,qt,qt]+"\\)$"),Qt=new RegExp("^rgb\\("+[Wt,Wt,Wt]+"\\)$"),Jt=new RegExp("^rgba\\("+[qt,qt,qt,Xt]+"\\)$"),tn=new RegExp("^rgba\\("+[Wt,Wt,Wt,Xt]+"\\)$"),nn=new RegExp("^hsl\\("+[Xt,Wt,Wt]+"\\)$"),en=new RegExp("^hsla\\("+[Xt,Wt,Wt,Xt]+"\\)$"),rn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function on(){return this.rgb().formatHex()}function an(){return this.rgb().formatRgb()}function un(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Zt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?sn(n):3===e?new fn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?new fn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?new fn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Kt.exec(t))?new fn(n[1],n[2],n[3],1):(n=Qt.exec(t))?new fn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Jt.exec(t))?ln(n[1],n[2],n[3],n[4]):(n=tn.exec(t))?ln(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=nn.exec(t))?yn(n[1],n[2]/100,n[3]/100,1):(n=en.exec(t))?yn(n[1],n[2]/100,n[3]/100,n[4]):rn.hasOwnProperty(t)?sn(rn[t]):"transparent"===t?new fn(NaN,NaN,NaN,0):null}function sn(t){return new fn(t>>16&255,t>>8&255,255&t,1)}function ln(t,n,e,r){return r<=0&&(t=n=e=NaN),new fn(t,n,e,r)}function cn(t){return t instanceof Gt||(t=un(t)),t?new fn((t=t.rgb()).r,t.g,t.b,t.opacity):new fn}function hn(t,n,e,r){return 1===arguments.length?cn(t):new fn(t,n,e,null==r?1:r)}function fn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function dn(){return"#"+gn(this.r)+gn(this.g)+gn(this.b)}function pn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function gn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function yn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new mn(t,n,e,r)}function vn(t){if(t instanceof mn)return new mn(t.h,t.s,t.l,t.opacity);if(t instanceof Gt||(t=un(t)),!t)return new mn;if(t instanceof mn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new mn(a,u,s,t.opacity)}function mn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function wn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function xn(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}Bt(Gt,un,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:on,formatHex:on,formatHsl:function(){return vn(this).formatHsl()},formatRgb:an,toString:an}),Bt(fn,hn,Yt(Gt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new fn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new fn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:dn,formatHex:dn,formatRgb:pn,toString:pn})),Bt(mn,(function(t,n,e,r){return 1===arguments.length?vn(t):new mn(t,n,e,null==r?1:r)}),Yt(Gt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new mn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new mn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new fn(wn(t>=240?t-240:t+120,i,r),wn(t,i,r),wn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var _n=function(t){return function(){return t}};function Tn(t,n){return function(e){return t+e*n}}function An(t){return 1==(t=+t)?Mn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):_n(isNaN(n)?e:n)}}function Mn(t,n){var e=n-t;return e?Tn(t,e):_n(isNaN(t)?n:t)}var bn=function t(n){var e=An(n);function r(t,n){var r=e((t=hn(t)).r,(n=hn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Mn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function En(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=hn(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}En((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return xn((e-r/n)*n,a,i,o,u)}})),En((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return xn((e-r/n)*n,i,o,a,u)}}));var Cn=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function Nn(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Sn(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=jn(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}var In=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},On=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Ln=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=jn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},kn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Pn=new RegExp(kn.source,"g");var Rn,Un,Dn=function(t,n){var e,r,i,o=kn.lastIndex=Pn.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=kn.exec(t))&&(r=Pn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:On(e,r)})),o=Pn.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})},jn=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?_n(n):("number"===r?On:"string"===r?(e=un(n))?(n=e,bn):Dn:n instanceof un?bn:n instanceof Date?In:Nn(n)?Cn:Array.isArray(n)?Sn:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Ln:On)(t,n)},zn=0,Hn=0,Fn=0,Vn=0,$n=0,Bn=0,Yn="object"==typeof performance&&performance.now?performance:Date,Gn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function qn(){return $n||(Gn(Xn),$n=Yn.now()+Bn)}function Xn(){$n=0}function Wn(){this._call=this._time=this._next=null}function Zn(t,n,e){var r=new Wn;return r.restart(t,n,e),r}function Kn(){$n=(Vn=Yn.now())+Bn,zn=Hn=0;try{!function(){qn(),++zn;for(var t,n=Rn;n;)(t=$n-n._time)>=0&&n._call.call(null,t),n=n._next;--zn}()}finally{zn=0,function(){var t,n,e=Rn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Rn=n);Un=t,Jn(r)}(),$n=0}}function Qn(){var t=Yn.now(),n=t-Vn;n>1e3&&(Bn-=n,Vn=t)}function Jn(t){zn||(Hn&&(Hn=clearTimeout(Hn)),t-$n>24?(t<1/0&&(Hn=setTimeout(Kn,t-Yn.now()-Bn)),Fn&&(Fn=clearInterval(Fn))):(Fn||(Vn=Yn.now(),Fn=setInterval(Qn,1e3)),zn=1,Gn(Kn)))}Wn.prototype=Zn.prototype={constructor:Wn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?qn():+e)+(null==n?0:+n),this._next||Un===this||(Un?Un._next=this:Rn=this,Un=this),this._call=t,this._time=e,Jn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Jn())}};var te=function(t,n,e){var r=new Wn;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},ne=L("start","end","cancel","interrupt"),ee=[],re=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var l,c,h,f;if(1!==e.state)return u();for(l in i)if((f=i[l]).name===e.name){if(3===f.state)return te(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(te((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Zn((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:ne,tween:ee,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function ie(t,n){var e=ae(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function oe(t,n){var e=ae(t,n);if(e.state>3)throw new Error("too late; already running");return e}function ae(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var ue,se,le,ce,he=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}},fe=180/Math.PI,de={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},pe=function(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*fe,skewX:Math.atan(s)*fe,scaleX:a,scaleY:u}};function ge(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:On(t,i)},{i:s-2,x:On(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:On(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:On(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:On(t,e)},{i:u-2,x:On(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var ye=ge((function(t){return"none"===t?de:(ue||(ue=document.createElement("DIV"),se=document.documentElement,le=document.defaultView),ue.style.transform=t,t=le.getComputedStyle(se.appendChild(ue),null).getPropertyValue("transform"),se.removeChild(ue),t=t.slice(7,-1).split(","),pe(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),ve=ge((function(t){return null==t?de:(ce||(ce=document.createElementNS("http://www.w3.org/2000/svg","g")),ce.setAttribute("transform",t),(t=ce.transform.baseVal.consolidate())?(t=t.matrix,pe(t.a,t.b,t.c,t.d,t.e,t.f)):de)}),", ",")",")");function me(t,n){var e,r;return function(){var i=oe(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function we(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=oe(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}o.tween=i}}function xe(t,n,e){var r=t._id;return t.each((function(){var t=oe(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return ae(t,r).value[n]}}var _e=function(t,n){var e;return("number"==typeof n?On:n instanceof un?bn:(e=un(n))?(n=e,bn):Dn)(t,n)};function Te(t){return function(){this.removeAttribute(t)}}function Ae(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Me(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function be(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Ee(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttribute(t)}}function Ce(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}function Ne(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Se(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Ie(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Se(t,i)),e}return i._value=n,i}function Oe(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Ne(t,i)),e}return i._value=n,i}function Le(t,n){return function(){ie(this,t).delay=+n.apply(this,arguments)}}function ke(t,n){return n=+n,function(){ie(this,t).delay=n}}function Pe(t,n){return function(){oe(this,t).duration=+n.apply(this,arguments)}}function Re(t,n){return n=+n,function(){oe(this,t).duration=n}}function Ue(t,n){if("function"!=typeof n)throw new Error;return function(){oe(this,t).ease=n}}function De(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?ie:oe;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var je=Vt.prototype.constructor;function ze(t){return function(){this.style.removeProperty(t)}}function He(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Fe(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&He(t,o,e)),r}return o._value=n,o}function Ve(t){return function(n){this.textContent=t.call(this,n)}}function $e(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Ve(r)),n}return r._value=t,r}var Be=0;function Ye(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ge(){return++Be}var qe=Vt.prototype;Ye.prototype=function(t){return Vt().transition(t)}.prototype={constructor:Ye,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=P(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(u=l[f])&&(s=t.call(u,u.__data__,f,l))&&("__data__"in u&&(s.__data__=u.__data__),h[f]=s,re(h[f],n,e,f,h,ae(u,e)));return new Ye(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=U(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,l=r[u],c=l.length,h=0;h<c;++h)if(s=l[h]){for(var f,d=t.call(s,s.__data__,h,l),p=ae(s,e),g=0,y=d.length;g<y;++g)(f=d[g])&&re(f,n,e,g,d,p);o.push(d),a.push(s)}return new Ye(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=D(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new Ye(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],h=l.length,f=a[u]=new Array(h),d=0;d<h;++d)(s=l[d]||c[d])&&(f[d]=s);for(;u<r;++u)a[u]=n[u];return new Ye(a,this._parents,this._name,this._id)},selection:function(){return new je(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ge(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)if(a=u[l]){var c=ae(a,n);re(a,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Ye(r,this._parents,t,e)},call:qe.call,nodes:qe.nodes,node:qe.node,size:qe.size,empty:qe.empty,each:qe.each,on:function(t,n){var e=this._id;return arguments.length<2?ae(this.node(),e).on.on(t):this.each(De(e,t,n))},attr:function(t,n){var e=Y(t),r="transform"===e?ve:_e;return this.attrTween(t,"function"==typeof n?(e.local?Ce:Ee)(e,r,xe(this,"attr."+t,n)):null==n?(e.local?Ae:Te)(e):(e.local?be:Me)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Y(t);return this.tween(e,(r.local?Ie:Oe)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?ye:_e;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=et(this,t),a=(this.style.removeProperty(t),et(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,ze(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=et(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=et(this,t)),a===s?null:a===r&&s===i?o:(i=s,o=n(r=a,u))}}(t,r,xe(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var s=oe(this,t),l=s.on,c=null==s.value[a]?o||(o=ze(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(u,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=et(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Fe(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(xe(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,$e(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ae(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?me:we)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Le:ke)(n,t)):ae(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Pe:Re)(n,t)):ae(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Ue(n,t)):ae(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};e.each((function(){var e=oe(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n}))}))}};var Xe={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function We(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Xe.time=qn(),Xe;return e}Vt.prototype.interrupt=function(t){return this.each((function(){he(this,t)}))},Vt.prototype.transition=function(t){var n,e;t instanceof Ye?(n=t._id,t=t._name):(n=Ge(),(e=Xe).time=qn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)(a=u[l])&&re(a,t,n,l,u,e||We(a,n));return new Ye(r,this._parents,t,n)};function Ze(t){return[+t[0],+t[1]]}function Ke(t){return[Ze(t[0]),Ze(t[1])]}["w","e"].map(Qe),["n","s"].map(Qe),["n","w","e","s","nw","ne","sw","se"].map(Qe);function Qe(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Je=Math.PI,tr=2*Je,nr=tr-1e-6;function er(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function rr(){return new er}er.prototype=rr.prototype={constructor:er,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,s=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*u-s*l)>1e-6&&i){var f=e-o,d=r-a,p=u*u+s*s,g=f*f+d*d,y=Math.sqrt(p),v=Math.sqrt(h),m=i*Math.tan((Je-Math.acos((p+h-g)/(2*y*v)))/2),w=m/v,x=m/y;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*l)+","+(n+w*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*d)+","+(this._x1=t+x*u)+","+(this._y1=n+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),s=t+a,l=n+u,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),e&&(h<0&&(h=h%tr+tr),h>nr?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Je)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var ir=rr;function or(){}function ar(t,n){var e=new or;if(t instanceof or)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}or.prototype=ar.prototype={constructor:or,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var ur=ar,sr=function(){var t,n,e,r=[],i=[];function o(e,i,a,u){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var s,l,c,h=-1,f=e.length,d=r[i++],p=ur(),g=a();++h<f;)(c=p.get(s=d(l=e[h])+""))?c.push(l):p.set(s,[l]);return p.each((function(t,n){u(g,n,o(t,i,a,u))})),g}return e={object:function(t){return o(t,0,lr,cr)},map:function(t){return o(t,0,hr,fr)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,u=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each((function(n,e){a.push({key:e,values:t(n,o)})}))),null!=u?a.sort((function(t,n){return u(t.key,n.key)})):a}(o(t,0,hr,fr),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function lr(){return{}}function cr(t,n,e){t[n]=e}function hr(){return ur()}function fr(t,n,e){t.set(n,e)}function dr(){}var pr=ur.prototype;function gr(t,n){var e=new dr;if(t instanceof dr)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}dr.prototype=gr.prototype={constructor:dr,has:pr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:pr.remove,clear:pr.clear,values:pr.keys,size:pr.size,empty:pr.empty,each:pr.each};Array.prototype.slice;var yr={},vr={};function mr(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function wr(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function xr(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function _r(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+xr(-n,6):n>9999?"+"+xr(n,6):xr(n,4))+"-"+xr(t.getUTCMonth()+1,2)+"-"+xr(t.getUTCDate(),2)+(o?"T"+xr(e,2)+":"+xr(r,2)+":"+xr(i,2)+"."+xr(o,3)+"Z":i?"T"+xr(e,2)+":"+xr(r,2)+":"+xr(i,2)+"Z":r||e?"T"+xr(e,2)+":"+xr(r,2)+"Z":"")}var Tr=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,s=o<=0,l=!1;function c(){if(s)return vr;if(l)return l=!1,yr;var n,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=o?s=!0:10===(r=t.charCodeAt(a++))?l=!0:13===r&&(l=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(n=a++)))l=!0;else if(13===r)l=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=c())!==vr;){for(var h=[];r!==yr&&r!==vr;)h.push(r),r=c();n&&null==(h=n(h,u++))||i.push(h)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?_r(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=mr(t);return function(r,i){return n(e(r),i,t)}}(t,n):mr(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=wr(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=wr(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}},Ar=Tr(","),Mr=Ar.parse,br=(Ar.parseRows,Ar.format,Ar.formatBody,Ar.formatRows,Ar.formatRow,Ar.formatValue,Tr("\t")),Er=br.parse;br.parseRows,br.format,br.formatBody,br.formatRows,br.formatRow,br.formatValue;function Cr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Nr=function(t,n){return fetch(t,n).then(Cr)};function Sr(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Nr(n,e).then((function(n){return t(n,r)}))}}Sr(Mr),Sr(Er);function Ir(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function Or(t){return function(n,e){return Nr(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}Or("application/xml"),Or("text/html"),Or("image/svg+xml");function Lr(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,s,l,c,h,f,d=t._root,p={data:r},g=t._x0,y=t._y0,v=t._x1,m=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((l=n>=(o=(g+v)/2))?g=o:v=o,(c=e>=(a=(y+m)/2))?y=a:m=a,i=d,!(d=d[h=c<<1|l]))return i[h]=p,t;if(u=+t._x.call(null,d.data),s=+t._y.call(null,d.data),n===u&&e===s)return p.next=d,i?i[h]=p:t._root=p,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(l=n>=(o=(g+v)/2))?g=o:v=o,(c=e>=(a=(y+m)/2))?y=a:m=a}while((h=c<<1|l)==(f=(s>=a)<<1|u>=o));return i[f]=d,i[h]=p,t}var kr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Pr(t){return t[0]}function Rr(t){return t[1]}function Ur(t,n,e){var r=new Dr(null==n?Pr:n,null==e?Rr:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Dr(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function jr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var zr=Ur.prototype=Dr.prototype;zr.copy=function(){var t,n,e=new Dr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=jr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=jr(n));return e},zr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Lr(this.cover(n,e),n,e,t)},zr.addAll=function(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),s=1/0,l=1/0,c=-1/0,h=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<s&&(s=r),r>c&&(c=r),i<l&&(l=i),i>h&&(h=i));if(s>c||l>h)return this;for(this.cover(s,l).cover(c,h),e=0;e<o;++e)Lr(this,a[e],u[e],t[e]);return this},zr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var a,u,s=i-e,l=this._root;e>t||t>=i||r>n||n>=o;)switch(u=(n<r)<<1|t<e,(a=new Array(4))[u]=l,l=a,s*=2,u){case 0:i=e+s,o=r+s;break;case 1:e=i-s,o=r+s;break;case 2:i=e+s,r=o-s;break;case 3:e=i-s,r=o-s}this._root&&this._root.length&&(this._root=l)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},zr.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},zr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},zr.find=function(t,n,e){var r,i,o,a,u,s,l,c=this._x0,h=this._y0,f=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new kr(g,c,h,f,d)),null==e?e=1/0:(c=t-e,h=n-e,f=t+e,d=n+e,e*=e);s=p.pop();)if(!(!(g=s.node)||(i=s.x0)>f||(o=s.y0)>d||(a=s.x1)<c||(u=s.y1)<h))if(g.length){var y=(i+a)/2,v=(o+u)/2;p.push(new kr(g[3],y,v,a,u),new kr(g[2],i,v,y,u),new kr(g[1],y,o,a,v),new kr(g[0],i,o,y,v)),(l=(n>=v)<<1|t>=y)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-l],p[p.length-1-l]=s)}else{var m=t-+this._x.call(null,g.data),w=n-+this._y.call(null,g.data),x=m*m+w*w;if(x<e){var _=Math.sqrt(e=x);c=t-_,h=n-_,f=t+_,d=n+_,r=g.data}}return r},zr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,s,l,c,h,f,d=this._root,p=this._x0,g=this._y0,y=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((l=o>=(u=(p+y)/2))?p=u:y=u,(c=a>=(s=(g+v)/2))?g=s:v=s,n=d,!(d=d[h=c<<1|l]))return this;if(!d.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,f=h)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[h]=i:delete n[h],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[f]=d:this._root=d),this):(this._root=i,this)},zr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},zr.root=function(){return this._root},zr.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},zr.visit=function(t){var n,e,r,i,o,a,u=[],s=this._root;for(s&&u.push(new kr(s,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&s.length){var l=(r+o)/2,c=(i+a)/2;(e=s[3])&&u.push(new kr(e,l,c,o,a)),(e=s[2])&&u.push(new kr(e,r,c,l,a)),(e=s[1])&&u.push(new kr(e,l,i,o,c)),(e=s[0])&&u.push(new kr(e,r,i,l,c))}return this},zr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new kr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,s=n.x1,l=n.y1,c=(a+s)/2,h=(u+l)/2;(o=i[0])&&e.push(new kr(o,a,u,c,h)),(o=i[1])&&e.push(new kr(o,c,u,s,h)),(o=i[2])&&e.push(new kr(o,a,h,c,l)),(o=i[3])&&e.push(new kr(o,c,h,s,l))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},zr.x=function(t){return arguments.length?(this._x=t,this):this._x},zr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Hr=function(){return Math.random()},Fr=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Hr),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Hr)),Vr=(function t(n){function e(){var t=Fr.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Hr),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Hr));(function t(n){function e(t){var e=Vr.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Hr),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Hr);function $r(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function Br(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var Yr=Array.prototype,Gr=Yr.map,qr=Yr.slice,Xr={name:"implicit"};function Wr(){var t=ur(),n=[],e=[],r=Xr;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Xr)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=ur();for(var r,o,a=-1,u=e.length;++a<u;)t.has(o=(r=e[a])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=qr.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Wr(n,e).unknown(r)},$r.apply(i,arguments),i}function Zr(){var t,n,e=Wr().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,u=0,s=0,l=.5;function h(){var e=r().length,h=o[1]<o[0],f=o[h-0],d=o[1-h];t=(d-f)/Math.max(1,e-u+2*s),a&&(t=Math.floor(t)),f+=(d-f-t*(e-u))*l,n=t*(1-u),a&&(f=Math.round(f),n=Math.round(n));var p=c(e).map((function(n){return f+t*n}));return i(h?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),h()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],h()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,h()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,h()):a},e.padding=function(t){return arguments.length?(u=Math.min(1,s=+t),h()):u},e.paddingInner=function(t){return arguments.length?(u=Math.min(1,t),h()):u},e.paddingOuter=function(t){return arguments.length?(s=+t,h()):s},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),h()):l},e.copy=function(){return Zr(r(),o).round(a).paddingInner(u).paddingOuter(s).align(l)},$r.apply(h(),arguments)}var Kr=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},Qr=function(t){return+t},Jr=[0,1];function ti(t){return t}function ni(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function ei(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function ri(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=ni(i,r),o=e(a,o)):(r=ni(r,i),o=e(o,a)),function(t){return o(r(t))}}function ii(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=ni(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=u(t,n,1,r)-1;return o[e](i[e](n))}}function oi(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ai(){var t,n,e,r,i,o,a=Jr,u=Jr,s=jn,l=ti;function c(){return r=Math.min(a.length,u.length)>2?ii:ri,i=o=null,h}function h(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,s)))(t(l(n)))}return h.invert=function(e){return l(n((o||(o=r(u,a.map(t),On)))(e)))},h.domain=function(t){return arguments.length?(a=Gr.call(t,Qr),l===ti||(l=ei(a)),c()):a.slice()},h.range=function(t){return arguments.length?(u=qr.call(t),c()):u.slice()},h.rangeRound=function(t){return u=qr.call(t),s=Kr,c()},h.clamp=function(t){return arguments.length?(l=t?ei(a):ti,h):l!==ti},h.interpolate=function(t){return arguments.length?(s=t,c()):s},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,r){return t=e,n=r,c()}}function ui(t,n){return ai()(t,n)}var si=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function li(t){if(!(n=si.exec(t)))throw new Error("invalid format: "+t);var n;return new ci({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function ci(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}li.prototype=ci.prototype,ci.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var hi,fi,di,pi,gi=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},yi=function(t){return(t=gi(Math.abs(t)))?t[1]:NaN},vi=function(t,n){var e=gi(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},mi={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return vi(100*t,n)},r:vi,s:function(t,n){var e=gi(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(hi=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+gi(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},wi=function(t){return t},xi=Array.prototype.map,_i=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];fi=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?wi:(n=xi.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?wi:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(xi.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var n=(t=li(t)).fill,e=t.align,h=t.sign,f=t.symbol,d=t.zero,p=t.width,g=t.comma,y=t.precision,v=t.trim,m=t.type;"n"===m?(g=!0,m="g"):mi[m]||(void 0===y&&(y=12),v=!0,m="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var w="$"===f?i:"#"===f&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",x="$"===f?o:/[%p]/.test(m)?s:"",_=mi[m],T=/[defgprs%]/.test(m);function A(t){var i,o,s,f=w,A=x;if("c"===m)A=_(t)+A,t="";else{var M=(t=+t)<0;if(t=isNaN(t)?c:_(Math.abs(t),y),v&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),M&&0==+t&&(M=!1),f=(M?"("===h?h:l:"-"===h||"("===h?"":h)+f,A=("s"===m?_i[8+hi/3]:"")+A+(M&&"("===h?")":""),T)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){A=(46===s?a+t.slice(i+1):t.slice(i))+A,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var b=f.length+t.length+A.length,E=b<p?new Array(p-b+1).join(n):"";switch(g&&d&&(t=r(E+t,E.length?p-A.length:1/0),E=""),e){case"<":t=f+t+A+E;break;case"=":t=f+E+t+A;break;case"^":t=E.slice(0,b=E.length>>1)+f+t+A+E.slice(b);break;default:t=E+f+t+A}return u(t)}return y=void 0===y?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),A.toString=function(){return t+""},A}return{format:h,formatPrefix:function(t,n){var e=h(((t=li(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(yi(n)/3))),i=Math.pow(10,-r),o=_i[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),di=fi.format,pi=fi.formatPrefix;var Ti=function(t,n,e,r){var i,o=y(t,n,e);switch((r=li(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(yi(n)/3)))-yi(Math.abs(t)))}(o,a))||(r.precision=i),pi(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,yi(n)-yi(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-yi(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return di(r)};function Ai(t){var n=t.domain;return t.ticks=function(t){var e=n();return p(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Ti(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],s=i[a];return s<u&&(r=u,u=s,s=r,r=o,o=a,a=r),(r=g(u,s,e))>0?r=g(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=g(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(s*r)/r,n(i)),t},t}function Mi(){var t=ui(ti,ti);return t.copy=function(){return oi(t,Mi())},$r.apply(t,arguments),Ai(t)}var bi=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t};function Ei(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Ci(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Ni(t){return t<0?-t*t:t*t}function Si(t){var n=t(ti,ti),e=1;function r(){return 1===e?t(ti,ti):.5===e?t(Ci,Ni):t(Ei(e),Ei(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},Ai(n)}function Ii(){var t=Si(ai());return t.copy=function(){return oi(t,Ii()).exponent(t.exponent())},$r.apply(t,arguments),t}var Oi=new Date,Li=new Date;function ki(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return ki((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Oi.setTime(+n),Li.setTime(+r),t(Oi),t(Li),Math.floor(e(Oi,Li))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Pi=ki((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Pi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ki((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Ri=Pi,Ui=(Pi.range,ki((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Di=Ui;Ui.range;function ji(t){return ki((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var zi=ji(0),Hi=ji(1),Fi=ji(2),Vi=ji(3),$i=ji(4),Bi=ji(5),Yi=ji(6),Gi=(zi.range,Hi.range,Fi.range,Vi.range,$i.range,Bi.range,Yi.range,ki((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),qi=Gi,Xi=(Gi.range,ki((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),Wi=Xi,Zi=(Xi.range,ki((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Ki=Zi,Qi=(Zi.range,ki((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Ji=Qi,to=(Qi.range,ki((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));to.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ki((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):to:null};var no=to;to.range;function eo(t){return ki((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var ro=eo(0),io=eo(1),oo=eo(2),ao=eo(3),uo=eo(4),so=eo(5),lo=eo(6),co=(ro.range,io.range,oo.range,ao.range,uo.range,so.range,lo.range,ki((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),ho=co,fo=(co.range,ki((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));fo.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ki((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var po=fo;fo.range;function go(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function yo(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function vo(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var mo,wo,xo={"-":"",_:" ",0:"0"},_o=/^\s*\d+/,To=/^%/,Ao=/[\\^$*+?|[\]().{}]/g;function Mo(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function bo(t){return t.replace(Ao,"\\$&")}function Eo(t){return new RegExp("^(?:"+t.map(bo).join("|")+")","i")}function Co(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function No(t,n,e){var r=_o.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function So(t,n,e){var r=_o.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Io(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Oo(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Lo(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function ko(t,n,e){var r=_o.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Po(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Ro(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Uo(t,n,e){var r=_o.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Do(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function jo(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function zo(t,n,e){var r=_o.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ho(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Fo(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Vo(t,n,e){var r=_o.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function $o(t,n,e){var r=_o.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Bo(t,n,e){var r=_o.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Yo(t,n,e){var r=To.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Go(t,n,e){var r=_o.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function qo(t,n,e){var r=_o.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Xo(t,n){return Mo(t.getDate(),n,2)}function Wo(t,n){return Mo(t.getHours(),n,2)}function Zo(t,n){return Mo(t.getHours()%12||12,n,2)}function Ko(t,n){return Mo(1+qi.count(Ri(t),t),n,3)}function Qo(t,n){return Mo(t.getMilliseconds(),n,3)}function Jo(t,n){return Qo(t,n)+"000"}function ta(t,n){return Mo(t.getMonth()+1,n,2)}function na(t,n){return Mo(t.getMinutes(),n,2)}function ea(t,n){return Mo(t.getSeconds(),n,2)}function ra(t){var n=t.getDay();return 0===n?7:n}function ia(t,n){return Mo(zi.count(Ri(t)-1,t),n,2)}function oa(t,n){var e=t.getDay();return t=e>=4||0===e?$i(t):$i.ceil(t),Mo($i.count(Ri(t),t)+(4===Ri(t).getDay()),n,2)}function aa(t){return t.getDay()}function ua(t,n){return Mo(Hi.count(Ri(t)-1,t),n,2)}function sa(t,n){return Mo(t.getFullYear()%100,n,2)}function la(t,n){return Mo(t.getFullYear()%1e4,n,4)}function ca(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Mo(n/60|0,"0",2)+Mo(n%60,"0",2)}function ha(t,n){return Mo(t.getUTCDate(),n,2)}function fa(t,n){return Mo(t.getUTCHours(),n,2)}function da(t,n){return Mo(t.getUTCHours()%12||12,n,2)}function pa(t,n){return Mo(1+ho.count(po(t),t),n,3)}function ga(t,n){return Mo(t.getUTCMilliseconds(),n,3)}function ya(t,n){return ga(t,n)+"000"}function va(t,n){return Mo(t.getUTCMonth()+1,n,2)}function ma(t,n){return Mo(t.getUTCMinutes(),n,2)}function wa(t,n){return Mo(t.getUTCSeconds(),n,2)}function xa(t){var n=t.getUTCDay();return 0===n?7:n}function _a(t,n){return Mo(ro.count(po(t)-1,t),n,2)}function Ta(t,n){var e=t.getUTCDay();return t=e>=4||0===e?uo(t):uo.ceil(t),Mo(uo.count(po(t),t)+(4===po(t).getUTCDay()),n,2)}function Aa(t){return t.getUTCDay()}function Ma(t,n){return Mo(io.count(po(t)-1,t),n,2)}function ba(t,n){return Mo(t.getUTCFullYear()%100,n,2)}function Ea(t,n){return Mo(t.getUTCFullYear()%1e4,n,4)}function Ca(){return"+0000"}function Na(){return"%"}function Sa(t){return+t}function Ia(t){return Math.floor(+t/1e3)}!function(t){mo=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,l=Eo(i),c=Co(i),h=Eo(o),f=Co(o),d=Eo(a),p=Co(a),g=Eo(u),y=Co(u),v=Eo(s),m=Co(s),w={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Xo,e:Xo,f:Jo,H:Wo,I:Zo,j:Ko,L:Qo,m:ta,M:na,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Sa,s:Ia,S:ea,u:ra,U:ia,V:oa,w:aa,W:ua,x:null,X:null,y:sa,Y:la,Z:ca,"%":Na},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:ha,e:ha,f:ya,H:fa,I:da,j:pa,L:ga,m:va,M:ma,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Sa,s:Ia,S:wa,u:xa,U:_a,V:Ta,w:Aa,W:Ma,x:null,X:null,y:ba,Y:Ea,Z:Ca,"%":Na},_={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return M(t,n,e,r)},d:jo,e:jo,f:Bo,H:Ho,I:Ho,j:zo,L:$o,m:Do,M:Fo,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},q:Uo,Q:Go,s:qo,S:Vo,u:So,U:Io,V:Oo,w:No,W:Lo,x:function(t,n,r){return M(t,e,n,r)},X:function(t,n,e){return M(t,r,n,e)},y:Po,Y:ko,Z:Ro,"%":Yo};function T(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++u<l;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=xo[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function A(t,n){return function(e){var r,i,o=vo(1900,void 0,1);if(M(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=yo(vo(o.y,0,1))).getUTCDay(),r=i>4||0===i?io.ceil(r):io(r),r=ho.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=go(vo(o.y,0,1))).getDay(),r=i>4||0===i?Hi.ceil(r):Hi(r),r=qi.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?yo(vo(o.y,0,1)).getUTCDay():go(vo(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,yo(o)):go(o)}}function M(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=_[i in xo?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=T(e,w),w.X=T(r,w),w.c=T(n,w),x.x=T(e,x),x.X=T(r,x),x.c=T(n,x),{format:function(t){var n=T(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=A(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=T(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=A(t+="",!0);return n.toString=function(){return t},n}}}(t),wo=mo.format,mo.parse,mo.utcFormat,mo.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function Oa(t){return new Date(t)}function La(t){return t instanceof Date?+t:+new Date(+t)}function ka(t,n,e,r,o,a,u,s,l){var c=ui(ti,ti),h=c.invert,f=c.domain,d=l(".%L"),p=l(":%S"),g=l("%I:%M"),v=l("%I %p"),m=l("%a %d"),w=l("%b %d"),x=l("%B"),_=l("%Y"),T=[[u,1,1e3],[u,5,5e3],[u,15,15e3],[u,30,3e4],[a,1,6e4],[a,5,3e5],[a,15,9e5],[a,30,18e5],[o,1,36e5],[o,3,108e5],[o,6,216e5],[o,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,31536e6]];function A(i){return(u(i)<i?d:a(i)<i?p:o(i)<i?g:r(i)<i?v:n(i)<i?e(i)<i?m:w:t(i)<i?x:_)(i)}function M(n,e,r,o){if(null==n&&(n=10),"number"==typeof n){var a=Math.abs(r-e)/n,u=i((function(t){return t[2]})).right(T,a);u===T.length?(o=y(e/31536e6,r/31536e6,n),n=t):u?(o=(u=T[a/T[u-1][2]<T[u][2]/a?u-1:u])[1],n=u[0]):(o=Math.max(y(e,r,n),1),n=s)}return null==o?n:n.every(o)}return c.invert=function(t){return new Date(h(t))},c.domain=function(t){return arguments.length?f(Gr.call(t,La)):f().map(Oa)},c.ticks=function(t,n){var e,r=f(),i=r[0],o=r[r.length-1],a=o<i;return a&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],a?e.reverse():e},c.tickFormat=function(t,n){return null==n?A:l(n)},c.nice=function(t,n){var e=f();return(t=M(t,e[0],e[e.length-1],n))?f(bi(e,t)):c},c.copy=function(){return oi(c,ka(t,n,e,r,o,a,u,s,l))},c}var Pa=ki((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Ra=(Pa.range,ki((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),Ua=(Ra.range,ki((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));Ua.range;function Da(){var t,n,e,r,i,o=0,a=1,u=ti,s=!1;function l(n){return isNaN(n=+n)?i:u(0===e?.5:(n=(r(n)-t)*e,s?Math.max(0,Math.min(1,n)):n))}return l.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(a=+i[1]),e=t===n?0:1/(n-t),l):[o,a]},l.clamp=function(t){return arguments.length?(s=!!t,l):s},l.interpolator=function(t){return arguments.length?(u=t,l):u},l.unknown=function(t){return arguments.length?(i=t,l):i},function(i){return r=i,t=i(o),n=i(a),e=t===n?0:1/(n-t),l}}function ja(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}var za=function(t){return function(){return t}};function Ha(t){this._context=t}Ha.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Fa=function(t){return new Ha(t)};function Va(t){return t[0]}function $a(t){return t[1]}var Ba=function(){var t=Va,n=$a,e=za(!0),r=null,i=Fa,o=null;function a(a){var u,s,l,c=a.length,h=!1;for(null==r&&(o=i(l=ir())),u=0;u<=c;++u)!(u<c&&e(s=a[u],u,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(s,u,a),+n(s,u,a));if(l)return o=null,l+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:za(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:za(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:za(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a},Ya=function(){var t=Va,n=null,e=za(0),r=$a,i=za(!0),o=null,a=Fa,u=null;function s(s){var l,c,h,f,d,p=s.length,g=!1,y=new Array(p),v=new Array(p);for(null==o&&(u=a(d=ir())),l=0;l<=p;++l){if(!(l<p&&i(f=s[l],l,s))===g)if(g=!g)c=l,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),h=l-1;h>=c;--h)u.point(y[h],v[h]);u.lineEnd(),u.areaEnd()}g&&(y[l]=+t(f,l,s),v[l]=+e(f,l,s),u.point(n?+n(f,l,s):y[l],r?+r(f,l,s):v[l]))}if(d)return u=null,d+""||null}function l(){return Ba().defined(i).curve(a).context(o)}return s.x=function(e){return arguments.length?(t="function"==typeof e?e:za(+e),n=null,s):t},s.x0=function(n){return arguments.length?(t="function"==typeof n?n:za(+n),s):t},s.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:za(+t),s):n},s.y=function(t){return arguments.length?(e="function"==typeof t?t:za(+t),r=null,s):e},s.y0=function(t){return arguments.length?(e="function"==typeof t?t:za(+t),s):e},s.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:za(+t),s):r},s.lineX0=s.lineY0=function(){return l().x(t).y(e)},s.lineY1=function(){return l().x(t).y(r)},s.lineX1=function(){return l().x(n).y(e)},s.defined=function(t){return arguments.length?(i="function"==typeof t?t:za(!!t),s):i},s.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),s):a},s.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),s):o},s},Ga=Array.prototype.slice,qa=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Xa=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function Wa(t,n){return t[n]}function Za(){this._=null}function Ka(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Qa(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Ja(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function tu(t){for(;t.L;)t=t.L;return t}Za.prototype={constructor:Za,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=tu(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Qa(this,e),e=(t=e).U),e.C=!1,r.C=!0,Ja(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Ja(this,e),e=(t=e).U),e.C=!1,r.C=!0,Qa(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?tu(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Qa(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Ja(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Qa(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Ja(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Qa(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Ja(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var nu=Za;function eu(t,n,e,r){var i=[null,null],o=Eu.push(i)-1;return i.left=t,i.right=n,e&&iu(i,t,n,e),r&&iu(i,n,t,r),Mu[t.index].halfedges.push(o),Mu[n.index].halfedges.push(o),i}function ru(t,n,e){var r=[n,e];return r.left=t,r}function iu(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function ou(t,n,e,r,i){var o,a=t[0],u=t[1],s=a[0],l=a[1],c=0,h=1,f=u[0]-s,d=u[1]-l;if(o=n-s,f||!(o>0)){if(o/=f,f<0){if(o<c)return;o<h&&(h=o)}else if(f>0){if(o>h)return;o>c&&(c=o)}if(o=r-s,f||!(o<0)){if(o/=f,f<0){if(o>h)return;o>c&&(c=o)}else if(f>0){if(o<c)return;o<h&&(h=o)}if(o=e-l,d||!(o>0)){if(o/=d,d<0){if(o<c)return;o<h&&(h=o)}else if(d>0){if(o>h)return;o>c&&(c=o)}if(o=i-l,d||!(o<0)){if(o/=d,d<0){if(o>h)return;o>c&&(c=o)}else if(d>0){if(o<c)return;o<h&&(h=o)}return!(c>0||h<1)||(c>0&&(t[0]=[s+c*f,l+c*d]),h<1&&(t[1]=[s+h*f,l+h*d]),!0)}}}}}function au(t,n,e,r,i){var o=t[1];if(o)return!0;var a,u,s=t[0],l=t.left,c=t.right,h=l[0],f=l[1],d=c[0],p=c[1],g=(h+d)/2,y=(f+p)/2;if(p===f){if(g<n||g>=r)return;if(h>d){if(s){if(s[1]>=i)return}else s=[g,e];o=[g,i]}else{if(s){if(s[1]<e)return}else s=[g,i];o=[g,e]}}else if(u=y-(a=(h-d)/(p-f))*g,a<-1||a>1)if(h>d){if(s){if(s[1]>=i)return}else s=[(e-u)/a,e];o=[(i-u)/a,i]}else{if(s){if(s[1]<e)return}else s=[(i-u)/a,i];o=[(e-u)/a,e]}else if(f<p){if(s){if(s[0]>=r)return}else s=[n,a*n+u];o=[r,a*r+u]}else{if(s){if(s[0]<n)return}else s=[r,a*r+u];o=[n,a*n+u]}return t[0]=s,t[1]=o,!0}function uu(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function su(t,n){return n[+(n.left!==t.site)]}function lu(t,n){return n[+(n.left===t.site)]}var cu,hu=[];function fu(){Ka(this),this.x=this.y=this.arc=this.site=this.cy=null}function du(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i[0],u=i[1],s=r[0]-a,l=r[1]-u,c=o[0]-a,h=o[1]-u,f=2*(s*h-l*c);if(!(f>=-Nu)){var d=s*s+l*l,p=c*c+h*h,g=(h*d-l*p)/f,y=(s*p-c*d)/f,v=hu.pop()||new fu;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=y+u)+Math.sqrt(g*g+y*y),t.circle=v;for(var m=null,w=bu._;w;)if(v.y<w.y||v.y===w.y&&v.x<=w.x){if(!w.L){m=w.P;break}w=w.L}else{if(!w.R){m=w;break}w=w.R}bu.insert(m,v),m||(cu=v)}}}}function pu(t){var n=t.circle;n&&(n.P||(cu=n.N),bu.remove(n),hu.push(n),Ka(n),t.circle=null)}var gu=[];function yu(){Ka(this),this.edge=this.site=this.circle=null}function vu(t){var n=gu.pop()||new yu;return n.site=t,n}function mu(t){pu(t),Au.remove(t),gu.push(t),Ka(t)}function wu(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,a=t.N,u=[t];mu(t);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<Cu&&Math.abs(r-s.circle.cy)<Cu;)o=s.P,u.unshift(s),mu(s),s=o;u.unshift(s),pu(s);for(var l=a;l.circle&&Math.abs(e-l.circle.x)<Cu&&Math.abs(r-l.circle.cy)<Cu;)a=l.N,u.push(l),mu(l),l=a;u.push(l),pu(l);var c,h=u.length;for(c=1;c<h;++c)l=u[c],s=u[c-1],iu(l.edge,s.site,l.site,i);s=u[0],(l=u[h-1]).edge=eu(s.site,l.site,null,i),du(s),du(l)}function xu(t){for(var n,e,r,i,o=t[0],a=t[1],u=Au._;u;)if((r=_u(u,a)-o)>Cu)u=u.L;else{if(!((i=o-Tu(u,a))>Cu)){r>-Cu?(n=u.P,e=u):i>-Cu?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){Mu[t.index]={site:t,halfedges:[]}}(t);var s=vu(t);if(Au.insert(n,s),n||e){if(n===e)return pu(n),e=vu(n.site),Au.insert(s,e),s.edge=e.edge=eu(n.site,s.site),du(n),void du(e);if(e){pu(n),pu(e);var l=n.site,c=l[0],h=l[1],f=t[0]-c,d=t[1]-h,p=e.site,g=p[0]-c,y=p[1]-h,v=2*(f*y-d*g),m=f*f+d*d,w=g*g+y*y,x=[(y*m-d*w)/v+c,(f*w-g*m)/v+h];iu(e.edge,l,p,x),s.edge=eu(l,t,null,x),e.edge=eu(t,p,null,x),du(n),du(e)}else s.edge=eu(n.site,s.site)}}function _u(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(e=a.site)[0],s=e[1],l=s-n;if(!l)return u;var c=u-r,h=1/o-1/l,f=c/l;return h?(-f+Math.sqrt(f*f-2*h*(c*c/(-2*l)-s+l/2+i-o/2)))/h+r:(r+u)/2}function Tu(t,n){var e=t.N;if(e)return _u(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Au,Mu,bu,Eu,Cu=1e-6,Nu=1e-12;function Su(t,n){return n[1]-t[1]||n[0]-t[0]}function Iu(t,n){var e,r,i,o=t.sort(Su).pop();for(Eu=[],Mu=new Array(t.length),Au=new nu,bu=new nu;;)if(i=cu,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(xu(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;wu(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Mu.length;i<o;++i)if((t=Mu[i])&&(r=(n=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(e=0;e<r;++e)a[e]=e,u[e]=uu(t,Eu[n[e]]);for(a.sort((function(t,n){return u[n]-u[t]})),e=0;e<r;++e)u[e]=n[a[e]];for(e=0;e<r;++e)n[e]=u[e]}}(),n){var a=+n[0][0],u=+n[0][1],s=+n[1][0],l=+n[1][1];!function(t,n,e,r){for(var i,o=Eu.length;o--;)au(i=Eu[o],t,n,e,r)&&ou(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Cu||Math.abs(i[0][1]-i[1][1])>Cu)||delete Eu[o]}(a,u,s,l),function(t,n,e,r){var i,o,a,u,s,l,c,h,f,d,p,g,y=Mu.length,v=!0;for(i=0;i<y;++i)if(o=Mu[i]){for(a=o.site,u=(s=o.halfedges).length;u--;)Eu[s[u]]||s.splice(u,1);for(u=0,l=s.length;u<l;)p=(d=lu(o,Eu[s[u]]))[0],g=d[1],h=(c=su(o,Eu[s[++u%l]]))[0],f=c[1],(Math.abs(p-h)>Cu||Math.abs(g-f)>Cu)&&(s.splice(u,0,Eu.push(ru(a,d,Math.abs(p-t)<Cu&&r-g>Cu?[t,Math.abs(h-t)<Cu?f:r]:Math.abs(g-r)<Cu&&e-p>Cu?[Math.abs(f-r)<Cu?h:e,r]:Math.abs(p-e)<Cu&&g-n>Cu?[e,Math.abs(h-e)<Cu?f:n]:Math.abs(g-n)<Cu&&p-t>Cu?[Math.abs(f-n)<Cu?h:t,n]:null))-1),++l);l&&(v=!1)}if(v){var m,w,x,_=1/0;for(i=0,v=null;i<y;++i)(o=Mu[i])&&(x=(m=(a=o.site)[0]-t)*m+(w=a[1]-n)*w)<_&&(_=x,v=o);if(v){var T=[t,n],A=[t,r],M=[e,r],b=[e,n];v.halfedges.push(Eu.push(ru(a=v.site,T,A))-1,Eu.push(ru(a,A,M))-1,Eu.push(ru(a,M,b))-1,Eu.push(ru(a,b,T))-1)}}for(i=0;i<y;++i)(o=Mu[i])&&(o.halfedges.length||delete Mu[i])}(a,u,s,l)}this.edges=Eu,this.cells=Mu,Au=bu=Eu=Mu=null}Iu.prototype={constructor:Iu,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return su(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,a,u,s,l,c=e.site,h=-1,f=n[i[o-1]],d=f.left===c?f.right:f.left;++h<o;)a=d,d=(f=n[i[h]]).left===c?f.right:f.left,a&&d&&r<a.index&&r<d.index&&(s=a,l=d,((u=c)[0]-l[0])*(s[1]-u[1])-(u[0]-s[0])*(l[1]-u[1])<0)&&t.push([c.data,a.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var s=t-i.site[0],l=n-i.site[1],c=s*s+l*l;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(e){var r=o.edges[e],u=r.left;if(u!==i.site&&u||(u=r.right)){var s=t-u[0],l=n-u[1],h=s*s+l*l;h<c&&(c=h,a=u.index)}}))}while(null!==a);return o._found=r,null==e||c<=e*e?i.site:null}};Math.SQRT2;function Ou(t,n,e){this.k=t,this.x=n,this.y=e}Ou.prototype={constructor:Ou,scale:function(t){return 1===t?this:new Ou(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Ou(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Ou(1,0,0);Ou.prototype;function Lu(t,n,e){const r=$t("#"+t);if(r.empty())throw console.error(`Element with id ${t} not found`),`Element with id ${t} not found`;const i=t+"-svg";return r.append("svg").attr("id",i).attr("width",n).attr("height",e),i}function ku(t,n,e){if(void 0===t)throw console.error("parentId not provided for creating new group for plot"),"parentId not provided for creating new group for plot";const r=$t("#"+t);if(r.empty())throw console.error(`Element with id ${t} not found`),`Element with id ${t} not found`;return r.append("g").attr("id",`${t}-${e}`).attr("transform",`translate(${n.left}, ${n.top})`)}function Pu(t,n,e){return t.selectAll(".ljs--heatmap-cell").data(n).join(t=>t.append("rect").attr("class","ljs--heatmap-cell").attr("x",t=>e.x(t.x)).attr("y",t=>e.y(t.y)).attr("width",e.x.bandwidth()).attr("height",e.y.bandwidth()).attr("fill",t=>e.c(t.c)),t=>t.transition().duration(1e3).attr("x",t=>e.x(t.x)).attr("y",t=>e.y(t.y)).attr("width",e.x.bandwidth()).attr("height",e.y.bandwidth()).attr("fill",t=>e.c(t.c)),t=>t.transition().duration(1e3).attr("opacity",0).remove())}const Ru={AREAPLOT:"areaplot",BARCODEPLOT:"barcodeplot",BARPLOT:"barplot",CATEGORICAL_HEATMAP:"categoricalheatmap",COLUMNPLOT:"columnplot",HEATMAP:"heatmap",LINEPLOT:"lineplot",SCATTERPLOT:"scatterplot",STACKEDBAR:"stackedbarplot",STACKEDCOLUMN:"stackedcolumnplot"},Uu=Ru,Du=[Ru.STACKEDBAR,Ru.STACKEDCOLUMN],ju={[Ru.AREAPLOT]:function(t,n,e){const r=Ya().curve(Fa).defined(t=>!isNaN(t.y)).x(t=>e.x(t.x)).y1(t=>e.y(e.y.domain()[0])).y0(e.y(e.y.domain()[0])),i=Ya().curve(Fa).defined(t=>!isNaN(t.y)).x(t=>e.x(t.x)).y1(t=>e.y(t.y)).y0(e.y(e.y.domain()[0]));return t.append("path").datum(n).attr("class","ljs--areaplot-path").attr("d",r).transition().duration(500).attr("d",i),t.selectAll(".ljs--areaplot-rect").data(n).enter().append("rect").attr("class",".ljs--areaplot-rect").attr("x",t=>e.x(t.x)).attr("y",t=>e.y(t.y)).attr("width",1).attr("height",t=>e.y(e.y.domain()[0])-e.y(t.y)).attr("fill","none").style("pointer-events","all")},[Ru.BARCODEPLOT]:function(t,n,e){return t.selectAll(".ljs--barcode-line").data(n).enter().append("line").attr("class","ljs--barcode-line").attr("x1",t=>e.x(t.x)).attr("x2",t=>e.x(t.x)).attr("y1",e.y(e.y.domain()[1])).attr("y2",e.y(e.y.domain()[0]))},[Ru.BARPLOT]:function(t,n,e){return t.selectAll(".ljs--bar").data(n).join(t=>t.append("rect").attr("class","ljs--bar").attr("x",0).attr("y",t=>e.y(t.y)).attr("height",e.y.bandwidth()).attr("fill",t=>t.c).call(t=>t.transition().duration(1e3).attr("width",t=>e.x(t.x)).attr("opacity",1)),t=>t.transition().duration(1e3).attr("width",t=>e.x(t.x)).attr("y",t=>e.y(t.y)).attr("height",e.y.bandwidth()),t=>t.transition().duration(1e3).attr("opacity",0).remove())},[Ru.CATEGORICAL_HEATMAP]:Pu,[Ru.COLUMNPLOT]:function(t,n,e){return t.selectAll(".ljs--column").data(n).enter().append("rect").attr("class","ljs--column").attr("x",t=>e.x(t.x)).attr("y",t=>e.y(t.y)).attr("width",e.x.bandwidth()).attr("height",t=>e.y(e.y.domain()[0])-e.y(t.y)).attr("fill",t=>t.c)},[Ru.HEATMAP]:Pu,[Ru.LINEPLOT]:function(t){let n;n=t.parentId?ku(t,"lineplot"):Lu(t,"lineplot");const e=Ba().defined(t=>!isNaN(t.y)).x(n=>t.xScale(n.x)).y(n=>t.yScale(t.yScale.domain()[0])),r=Ba().defined(t=>!isNaN(t.y)).x(n=>t.xScale(n.x)).y(n=>t.yScale(n.y)),i=(n.append("path").datum(t.data).attr("class","ljs--lineplot-path").attr("d",e).transition().duration(500).attr("d",r),n.selectAll(".ljs--lineplot-rect").data(t.data).enter().append("rect").attr("class","ljs--lineplot-rect").attr("x",n=>t.xScale(n.x)).attr("y",n=>t.yScale(n.y)).attr("width",1).attr("height",n=>t.yScale(t.yScale.domain()[0])-t.yScale(n.y)).attr("fill","none").style("pointer-events","all"));return t.xAxis.render(n,t),t.yAxis.render(n,t),t.title&&n.append("text").attr("class","lineplot-title").html(t.title).attr("x",t.innerWidth/2).attr("y",-t.padding.top/3).attr("text-anchor","middle"),i},[Ru.SCATTERPLOT]:function(t,n,e){return t.selectAll(".ljs--scatter-dot").data(n).enter().append("circle").attr("class","ljs--scatter-dot").attr("cx",t=>e.x(t.x)).attr("cy",t=>e.y(t.y)).attr("r",t=>e.r(t.r)).attr("fill",t=>t.c)},[Ru.STACKEDBAR]:function(t,n,e,r){const i=t.selectAll(".ljs--stacked-series").data(n).enter().append("g").attr("class","ljs--stacked-series"),o=r==Bu.POSITIVE?t=>e.x(t[0]):t=>e.x(t[1]),a=r==Bu.POSITIVE?t=>isNaN(t[0])||isNaN(t[1])?0:e.x(t[1])-e.x(t[0]):t=>isNaN(t[0])||isNaN(t[1])?0:e.x(t[0])-e.x(t[1]);return i.selectAll(".ljs--stacked-series-rect").data(t=>t).enter().append("rect").attr("class","ljs--stacked-series-rect").attr("x",o).attr("y",t=>e.y(t.data.y)).attr("width",a).attr("height",e.y.bandwidth()).attr("fill",t=>t.color)},[Ru.STACKEDCOLUMN]:function(t,n,e){return t.selectAll(".ljs--stacked-series").data(n).join(t=>t.append("g").attr("class","ljs--stacked-series"),t=>t.attr("class","ljs--stacked-series"),t=>t.remove()).selectAll(".ljs--stacked-series-rect").data(t=>t).join(t=>t.append("rect").attr("class","ljs--stacked-series-rect").attr("x",t=>e.x(t.data.x)).attr("y",t=>e.y(t[1])).attr("height",t=>e.y(t[0])-e.y(t[1])).attr("width",e.x.bandwidth()).attr("fill",t=>t.color),t=>t.transition().duration(1e3).attr("x",t=>e.x(t.data.x)).attr("y",t=>e.y(t[1])).attr("height",t=>e.y(t[0])-e.y(t[1])).attr("width",e.x.bandwidth()).attr("fill",t=>colorMap[t.series]),t=>t.transition().duration(1e3).attr("opacity",0).remove())}},zu={CATEGORICAL:"categorical",LINEAR:"linear",ORDINAL:"ordinal",SEQUENTIAL:"sequential",SQRT:"sqrt",TEMPORAL:"temporal"},Hu=[zu.LINEAR,zu.SEQUENTIAL,zu.SQRT,zu.TEMPORAL],Fu="x",Vu="y",$u={[Ru.AREAPLOT]:{x:zu.TEMPORAL,y:zu.LINEAR},[Ru.BARPLOT]:{x:zu.LINEAR,y:zu.CATEGORICAL},[Ru.BARCODEPLOT]:{x:zu.LINEAR,y:zu.LINEAR},[Ru.CATEGORICAL_HEATMAP]:{x:zu.CATEGORICAL,y:zu.CATEGORICAL,c:zu.ORDINAL},[Ru.COLUMNPLOT]:{x:zu.CATEGORICAL,y:zu.LINEAR},[Ru.HEATMAP]:{x:zu.CATEGORICAL,y:zu.CATEGORICAL,c:zu.SEQUENTIAL},[Ru.LINEPLOT]:{x:zu.TEMPORAL,y:zu.LINEAR},[Ru.SCATTERPLOT]:{x:zu.LINEAR,y:zu.LINEAR},[Ru.STACKEDBAR]:{x:zu.LINEAR,y:zu.CATEGORICAL},[Ru.STACKEDCOLUMN]:{x:zu.CATEGORICAL,y:zu.LINEAR}},Bu={POSITIVE:1,NEGATIVE:-1},Yu={TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Gu={[Ru.AREAPLOT]:{x:{[Bu.POSITIVE]:Yu.BOTTOM,[Bu.NEGATIVE]:Yu.BOTTOM},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.RIGHT}},[Ru.BARCODEPLOT]:{x:{[Bu.POSITIVE]:Yu.BOTTOM,[Bu.NEGATIVE]:Yu.BOTTOM},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.RIGHT}},[Ru.BARPLOT]:{x:{[Bu.POSITIVE]:Yu.BOTTOM,[Bu.NEGATIVE]:Yu.BOTTOM},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.RIGHT}},[Ru.CATEGORICAL_HEATMAP]:{x:{[Bu.POSITIVE]:Yu.TOP,[Bu.NEGATIVE]:Yu.TOP},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.RIGHT}},[Ru.COLUMNPLOT]:{x:{[Bu.POSITIVE]:Yu.BOTTOM,[Bu.NEGATIVE]:Yu.TOP},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.LEFT}},[Ru.HEATMAP]:{x:{[Bu.POSITIVE]:Yu.TOP,[Bu.NEGATIVE]:Yu.TOP},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.RIGHT}},[Ru.LINEPLOT]:{x:{[Bu.POSITIVE]:Yu.BOTTOM,[Bu.NEGATIVE]:Yu.BOTTOM},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.RIGHT}},[Ru.SCATTERPLOT]:{x:{[Bu.POSITIVE]:Yu.BOTTOM,[Bu.NEGATIVE]:Yu.BOTTOM},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.RIGHT}},[Ru.STACKEDBAR]:{x:{[Bu.POSITIVE]:Yu.BOTTOM,[Bu.NEGATIVE]:Yu.BOTTOM},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.RIGHT}},[Ru.STACKEDCOLUMN]:{x:{[Bu.POSITIVE]:Yu.BOTTOM,[Bu.NEGATIVE]:Yu.TOP},y:{[Bu.POSITIVE]:Yu.LEFT,[Bu.NEGATIVE]:Yu.LEFT}}},qu=t=>`x: ${t.x}<br/>\n            y: ${t.y}`,Xu=t=>`x: ${t.x}<br/>\n            y: ${t.y}<br/>\n            c: ${t.c}`,Wu={[Ru.AREAPLOT]:qu,[Ru.BARPLOT]:qu,[Ru.BARCODEPLOT]:t=>""+t.x,[Ru.CATEGORICAL_HEATMAP]:Xu,[Ru.COLUMNPLOT]:qu,[Ru.HEATMAP]:Xu,[Ru.LINEPLOT]:qu,[Ru.SCATTERPLOT]:qu,[Ru.STACKEDBAR]:t=>`y: ${t.data.y}<br/>\n            series: ${t.series}<br/>\n            val: ${t.data[t.series]}`,[Ru.STACKEDCOLUMN]:t=>`x: ${t.data.x}<br/>\n            series: ${t.series}<br/>\n            val: ${t.data[t.series]}`};class Zu{constructor(t,n=!1,e=10,r=12,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i,this.tooltip=void 0,this._createTooltip()}_createTooltip(){$t("#"+this.id).empty()?this.tooltip=$t("body").append("div").attr("class","ljs--tooltip").attr("id",this.id):this.tooltip=$t("#"+this.id)}_move(){const t=$t("body").node(),n=this.tooltip.node();let e=It.pageX,r=It.pageY;if(this.verbose&&(console.log(e),console.log(r)),e=e+this.offsetX<0?10:e+this.offsetX,r=r+this.offsetY<0?10:r+this.offsetY,e+n.scrollWidth>t.scrollWidth){e-=e+n.scrollWidth+10-t.scrollWidth}if(r+n.scrollHeight>t.scrollHeight){r-=r+n.scrollHeight+10-t.scrollHeight}e<=It.pageX&&It.pageX<=e+n.scrollWidth&&r<=It.pageY&&It.pageY<=r+n.scrollHeight&&(e=It.pageX-n.scrollWidth-10),this.tooltip.style("left",e+"px").style("top",r+"px")}show(t){this.verbose&&console.log(t),this.tooltip.html(t),this._move(),this.tooltip.style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){this.tooltip.transition().duration(this.duration).style("opacity",0),this.tooltip.html("")}}class Ku{constructor(t,n,e,r=1,i){this._validateInputs(t,n),this.x=t,this.y=n,this.c=e,this.r=r,this.series=i}_validateInputs(t,n){if(void 0===t)throw console.error("data x value cannot be undefined"),"data x value cannot be undefined";if(void 0===n)throw console.error("data y value cannot be undefined"),"data y value cannot be undefined"}validateScaleType(t,n){let e=!1;switch(t){case zu.LINEAR:case zu.SQRT:e=isNaN(this[n]),e&&console.error(`non-numerial value found for ${t} scale in ${n} attribute: ${this[n]}.`);break;case zu.TEMPORAL:e="[object Date]"!=Object.prototype.toString.call(this[n]),e&&console.error(`invalid date found for ${t} scale in ${n} attribute: ${this[n]}.`)}return e}}class Qu{constructor(t,n={}){this.axisType=t,Object.keys(n).forEach(t=>{this[t]=n[t]}),this._scale=void 0,this._validate()}_validate(){if(this.axisType==Fu&&![Yu.TOP,Yu.BOTTOM].includes(this.orientation))throw`Invalid orientation ${this.orientation} found for ${this.axisType} axis`;if(this.axisType==Vu&&![Yu.LEFT,Yu.RIGHT].includes(this.orientation))throw`Invalid orientation ${this.orientation} found for ${this.axisType} axis`}_getAxisFn(t){switch(t){case Yu.BOTTOM:return b(3,n);case Yu.TOP:return function(t){return b(1,t)}();case Yu.LEFT:return function(t){return b(4,t)}();case Yu.RIGHT:return function(t){return b(2,t)}();default:console.error("unrecognized axis orientation "+t)}var n}_renderTitle(t,n){if(n.hasRendered||this.display||void 0===this.title||this.hideTitle)return;const e=t.append("text").attr("class",`ljs--${this.axisType}-axis-title`).html(this.title);switch(this.orientation){case Yu.BOTTOM:e.attr("x",n.innerWidth/2).attr("y",n.height-n.padding.bottom/2).attr("text-anchor","middle");break;case Yu.TOP:e.attr("x",n.innerWidth/2).attr("text-anchor","middle");break;case Yu.LEFT:e.attr("x",-n.padding.left/2).attr("y",-n.padding.top/2).attr("text-anchor","middle");break;case Gu.RIGHT:e.attr("x",""+n.innerWidth).attr("text-anchor","start")}}render(t,n){if(!this.display)return;if(this._renderTitle(t,n),this.hideAxis)return;let e;const r=this.axisType+"-axis";let i=this._getAxisFn(this.orientation).scale(this._scale).tickSizeOuter(0);var o;n.hasRendered?(e=t.select("."+r),e.transition().duration(1e3).call(i)):(e=t.append("g").attr("class","ljs--"+r),o=this.scaleType,-1!=Hu.indexOf(o)&&(i=i.ticks(this.ticks)),this.orientation==Yu.BOTTOM?e.attr("transform",`translate(0,${n.innerHeight})`):this.orientation==Yu.RIGHT&&e.attr("transform",`translate(${n.innerWidth}, 0)`),e.call(i)),0!=this.angle&&e.selectAll("text").attr("dy","-0.8em").attr("transform",`translate(0, 7) rotate(${this.angle})`),this.textAnchor&&e.selectAll("text").style("text-anchor",this.textAnchor),this.hideLabels&&e.selectAll(".tick > text").remove(),this.hideTicks&&e.selectAll(".tick > line").remove()}createScale(t,n){void 0!==this.min&&(t[0]=this.min),void 0!==this.max&&(t[1]=this.max);const e=zu;switch(this.scaleType){case e.CATEGORICAL:this._scale=Zr().padding([this.padding]);break;case e.LINEAR:this._scale=Mi();break;case e.TEMPORAL:this._scale=function(){return $r.apply(ka(Ri,Di,zi,qi,Wi,Ki,Ji,no,wo).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}();break;default:console.error("Unknown scale type: ",this.scaleType)}return this._scale.domain(t).range(n)}}class Ju{constructor(t,n,e,r={}){this._validateInputs(t,n,e),this._userInput=r,this.data=t.map(t=>new Ku(t.x,t.y,t.c,t.r,t.series)),this.type=n,this.rootId=e,this.hasRendered=!1,this.customizableProp=["parentId","width","height","orientation","title","padding","axis","tooltip","series"],this.parentId=void 0,this.width=300,this.height=300,this.orientation=Bu.POSITIVE,this.title=void 0,this.padding={top:50,left:50,bottom:50,right:50},this.axis={x:{scaleType:void 0,title:"x axis",ticks:void 0,min:void 0,max:void 0,orientation:"bottom",padding:.15,angle:0,textAnchor:void 0,display:!0,hideAxis:!1,hideTicks:!1,hideLabels:!1,hideTitle:!1},y:{scaleType:void 0,title:"y axis",ticks:void 0,min:void 0,max:void 0,orientation:"left",padding:.15,angle:0,textAnchor:void 0,display:!0,hideAxis:!1,hideTicks:!1,hideLabels:!1,hideTitle:!1},c:{scaleType:void 0,domain:["TODO: how to best customize the color scale"],range:["TBA"],interpolator:void 0}},this.axisInternal={},this.tooltip={enabled:!0,id:void 0,formatter:void 0},this.series=[],this._changeSettings(r),this.innerWidth=this.width-this.padding.left-this.padding.right,this.innerHeight=this.height-this.padding.top-this.padding.bottom,this.tooltipObj=new Zu(this.tooltip.id),Du.includes(this.type)&&(this.dataStack=this.createDataStack()),this.scale=this.setScales()}getCustomizable(){let t={};return this.customizableProp.forEach(n=>{t[n]=this[n]}),t}_changeSettings(t){let n=this;n.customizableProp.forEach(e=>{switch(e){case"padding":void 0!==t.padding&&(n.padding=Object.assign({},n.padding,t.padding));break;case"tooltip":n.tooltip.formatter=Wu[n.type],n.tooltip.id=n.rootId+"-tooltip",void 0!==t.tooltip&&(n.tooltip=Object.assign({},n.tooltip,t.tooltip));break;case"axis":Object.keys(n.axis).forEach(e=>{let r=n.axis[e];["x","y"].includes(e)?(r.scaleType=$u[n.type][e],r.orientation=Gu[n.type][e][n.orientation],void 0!==t.axis&&void 0!==t.axis[e]&&(r=Object.assign({},r,t.axis[e])),n.axisInternal[e]=new Qu(e,r)):"c"==e&&(r.scaleType=$u[this.type].c,void 0!==t.axis&&void 0!==t.axis.c&&(r=Object.assign({},r,t.axis.c),n.axisInternal[e]=r))});break;default:void 0!==t[e]&&(n[e]=t[e])}})}createDataStack(){const t=Uu;if(!this.series.length)throw"'series' attribute was not provided; cannot create series data stacks";const n=this.type==t.STACKEDBAR?"y":"x",e=this.type==t.STACKEDBAR?"x":"y",r=new Set,i=sr().key(t=>t[n]).entries(this.data).map(t=>{const i={[n]:t.key};return t.values.forEach(t=>{r.add(t.series),i[t.series]=t[e]}),i}),o=this.series.map(t=>t.name);((t,n)=>{const e=Array.from(t).filter(t=>!n.includes(t));if(e.length)throw"Unknown series found in data: "+e.join(", ")})(r,o);const a={};this.series.forEach(t=>a[t.name]=t.color);return function(){var t=za([]),n=Xa,e=qa,r=Wa;function i(i){var o,a,u=t.apply(this,arguments),s=i.length,l=u.length,c=new Array(l);for(o=0;o<l;++o){for(var h,f=u[o],d=c[o]=new Array(s),p=0;p<s;++p)d[p]=h=[0,+r(i[p],f,p,i)],h.data=i[p];d.key=f}for(o=0,a=n(c);o<l;++o)c[a[o]].index=o;return e(c,a),c}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:za(Ga.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:za(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Xa:"function"==typeof t?t:za(Ga.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?qa:t,i):e},i}().keys(o)(i).map(t=>(t.forEach(n=>{n.series=t.key,n.color=a[n.series]}),t))}setScales(){if(this.data.filter(t=>t.validateScaleType(this.axisInternal.x.scaleType,"x")||t.validateScaleType(this.axisInternal.y.scaleType,"y")).length>0)throw"Fatal Error: Not all data are valid";const t=(t,n)=>s(t.map(t=>t[n]));let n=t(this.data,"x"),e=[0,this.innerWidth],r=t(this.data,"y"),i=[this.innerHeight,0];const o=Uu;switch(this.type){case o.AREAPLOT:case o.LINEPLOT:case o.SCATTERPLOT:break;case o.BARCODEPLOT:r=[0,1];break;case o.BARPLOT:r=this.data.map(t=>t.y),i=[0,this.innerHeight];break;case o.CATEGORICAL_HEATMAP:case o.HEATMAP:n=this.data.map(t=>t.x),r=this.data.map(t=>t.y),i=[0,this.innerHeight];break;case o.COLUMNPLOT:n=this.data.map(t=>t.x);break;case o.STACKEDBAR:n=[0,v(this.dataStack,t=>v(t,t=>t[1]))],e=this.orientation==Bu.POSITIVE?e:[this.innerWidth,0],r=this.data.map(t=>t.y),i=[0,this.innerHeight];break;case Uu.STACKEDCOLUMN:n=this.data.map(t=>t.x),r=[0,v(this.dataStack,t=>v(t,t=>t[1]))];break;default:console.error("unknown plot type")}return{x:this.axisInternal.x.createScale(n,e),y:this.axisInternal.y.createScale(r,i),r:(()=>function(){return Ii.apply(null,arguments).exponent(.5)}().domain(s(this.data.map(t=>t.r))).range([1,3]))(),c:void 0===this.axisInternal.c?void 0:(()=>{if(this.axisInternal.c.scaleType==zu.ORDINAL){let t=Wr();return t.unknown(void 0),t.domain(this.axisInternal.c.domain).range(this.axisInternal.c.range)}if(this.axisInternal.c.scaleType==zu.SEQUENTIAL){return function t(){var n=Ai(Da()(ti));return n.copy=function(){return ja(n,t())},Br.apply(n,arguments)}(this.axisInternal.c.interpolator).domain(this.axisInternal.c.domain)}})()}}render(t=!1){let n;t&&this.hasRendered&&($t(`#${this.parentId}-${this.type}`).remove(),this.hasRendered=!1),this.hasRendered?n=$t(`#${this.parentId}-${this.type}`):(void 0===this.parentId&&(this.parentId=Lu(this.rootId,this.width,this.height)),n=ku(this.parentId,this.padding,this.type),void 0!==this.title&&n.append("text").html(this.title).attr("x",this.innerWidth/2).attr("y",-this.padding.top/3).attr("text-anchor","middle")),this.axisInternal.x.render(n,this),this.axisInternal.y.render(n,this);const e=Du.includes(this.type)?this.dataStack:this.data;let r=ju[this.type](n,e,this.scale,this.orientation);this.hasRendered=!0,void 0!==r&&this.tooltip.enabled&&(r.on("mouseover",(t,n,e)=>{$t(e[n]).classed("ljs--mouseover",!0),this.tooltipObj.show(this.tooltip.formatter(t))}),r.on("mouseout",(t,n,e)=>{$t(e[n]).classed("ljs--mouseover",!1),this.tooltipObj.hide()}))}_validateInputs(t,n,e){if(void 0===t)throw console.error("No data provided."),"No data provided.";if(void 0===n)throw console.error("Plot type required."),"Plot type required.";if(!Object.values(Uu).includes(n))throw console.error("Unrecognized plot type "+n),"Unrecognized plot type "+n;if(void 0===e)throw console.error("rootId cannot be undefined."),"rootId cannot be undefined."}verbose(){console.log(this),console.log(this.padding),console.log(this.axisInternal.x.title)}}class ts{constructor(t,n,e){this.rootId=n,this._userInput=e,this.customizableProp=["parentId","width","height","padding","grid"],this.parentId=void 0,this.width=1e3,this.height=600,this.grid={rows:v(t.map(t=>t.row))+1||1,columns:v(t.map(t=>t.column))+1||1,rowSizes:void 0,columnSizes:void 0},this.gridInternal={plotSizes:void 0},this.title=void 0,this.padding={top:20,right:20,bottom:20,left:20},this._changeSettings(e),this.innerWidth=this.width-this.padding.left-this.padding.right,this.innerHeight=this.height-this.padding.top-this.padding.bottom,this.plots=t.map(t=>{let e={width:this.innerWidth*this.gridInternal.plotSizes[t.row][t.column].colSize,height:this.innerHeight*this.gridInternal.plotSizes[t.row][t.column].rowSize};e=Object.assign({},e,t);const r=new Ju(t.data,t.type,n,e);return r.row=t.row,r.column=t.column,r.rowStart=this.gridInternal.plotSizes[t.row][t.column].rowStart,r.colStart=this.gridInternal.plotSizes[t.row][t.column].colStart,r},this),this.xScale=Mi().domain([0,1]).range([0,this.innerWidth]),this.yScale=Mi().domain([0,1]).range([0,this.innerHeight])}getCustomizable(){let t={};return this.customizableProp.forEach(n=>{t[n]=this[n]}),t}render(){let t;void 0===this.parentId&&(this.parentId=Lu(this.rootId,this.width,this.height)),t=ku(this.parentId,this.padding,"lattice");const n=t.attr("id");let e=t.selectAll(".ljs--lattice-plot").data(this.plots);e.enter().append("g").attr("class","ljs--lattice-plot").attr("id",t=>`${n}-${t.row}-${t.column}`).attr("transform",t=>`translate(${this.xScale(t.colStart)}, ${this.yScale(t.rowStart)})`).each(t=>{t.parentId=`${n}-${t.row}-${t.column}`,t.render()}).attr("opacity",0).transition().duration(500).attr("opacity",1),e.exit().remove()}_changeSettings(t){let n=this;Object.keys(t).forEach(e=>{switch(e){case"padding":n.padding=Object.assign({},n.padding,t.padding);break;case"grid":n.grid=Object.assign({},n.grid,t.grid);break;default:n[e]=t[e]}}),n._validateGridInfo(),n._updateGridInfo()}_validateGridInfo(){if(void 0!==this.grid.rowSizes){this.grid.rows=this.grid.rowSizes.length;const t=this.grid.rowSizes.reduce((t,n)=>t+n.size,0);if(1!=Number(t.toPrecision(2)))throw console.error("In rowSizes, sum of all size values must add up to 1."),"In rowSizes, sum of all size values must add up to 1."}else{this.grid.rowSizes=[];for(let t=0;t<this.grid.rows;t++)this.grid.rowSizes.push({row:t,size:1/this.grid.rows})}if(void 0!==this.grid.columnSizes){this.grid.columns=this.grid.columnSizes.length;const t=this.grid.columnSizes.reduce((t,n)=>t+n.size,0);if(1!=Number(t.toPrecision(2)))throw console.error("In columnSizes, sum of all size values must add up to 1."),"In columnSizes, sum of all size values must add up to 1."}else{this.grid.columnSizes=[];for(let t=0;t<this.grid.columns;t++)this.grid.columnSizes.push({column:t,size:1/this.grid.columns})}}_updateGridInfo(){this.grid.rowSizes.sort((t,n)=>t.row-n.row),this.grid.columnSizes.sort((t,n)=>t.column-n.column),this.grid.rowSizes.forEach((t,n)=>{if(0==n)t.start=0;else{const e=this.grid.rowSizes[n-1];t.start=e.start+e.size}}),this.grid.columnSizes.forEach((t,n)=>{if(0==n)t.start=0;else{const e=this.grid.columnSizes[n-1];t.start=e.start+e.size}}),this.gridInternal.plotSizes=this.grid.rowSizes.map(t=>this.grid.columnSizes.map(n=>({rowSize:t.size,rowStart:t.start,colSize:n.size,colStart:n.start})))}}const ns={json:function(t,n){return fetch(t,n).then(Ir)},nest:sr};function es(t,n,e,r){let i=new Ju(t,n,e,r);return i.render(),i}function rs(t,n,e={}){const r=new ts(t,n,e);return r.render(),r}function is(){return Ru}function os(t){void 0===t&&(t=new Ju([],"scatterplot","foo"));return JSON.stringify(t.getCustomizable(),(t,n)=>void 0===n?null:n,2)}function as(t){void 0===t&&(t=new ts([],"foo","foo"));return JSON.stringify(t.getCustomizable(),(t,n)=>void 0===n?null:n,2)}class us{}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,